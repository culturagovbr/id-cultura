{% extends 'LoginCidadaoCoreBundle::compact.base.html.twig' %}

{% set form_has_errors = not form.vars.valid %}

{% block panel_body_class %}task-email-validation{% endblock %}

{% block panel_body %}
    {% for type, messages in app.session.flashbag.all %}
        {% for message in messages %}
            <div class="alert alert-{{ type }} alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="{{ 'Close' | trans }}"><span
                            aria-hidden="true">&times;</span></button>
                {{ message }}
            </div>
        {% endfor %}
    {% endfor %}

    <h1>
        <span class="glyphicon glyphicon-envelope" aria-hidden="true"></span>
        {{ 'tasks.confirm_email.title' | trans }}
    </h1>

    <p class="main">{{ 'tasks.confirm_email.body' | trans }}</p>

    <div class="collapse {{ not form_has_errors ? 'in' : '' }} collapse-resend">
        <h2>{{ 'tasks.confirm_email.resend.title' | trans }}</h2>
        <p>{{ 'tasks.confirm_email.resend.body' | trans }}</p>
    </div>
    {# {{ path('task_confirm_email', {'resend': 'âœ“'}) }} #}

    <button class="btn btn-block btn-danger resend" type="button"
            data-toggle="collapse" data-target=".collapse-resend"
            aria-expanded="false" aria-controls="collapse-resend">
        {{ 'tasks.confirm_email.resend.button' | trans }}
    </button>

    <div class="collapse collapse-resend check-before-resend {{ form_has_errors ? 'in' : '' }}">
        {{ form_start(form) }}
        <h2>{{ 'tasks.confirm_email.resend.before.title' | trans }}</h2>
        <p>{{ 'tasks.confirm_email.resend.before.body' | trans }}</p>

        {{ form_row(form.email) }}

        <button type="submit" class="btn btn-block btn-success">
            {{ 'tasks.confirm_email.resend.before.button' | trans }}
        </button>
        {{ form_end(form) }}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        $(document).ready(function () {
            dynamicForm.validEmail.wait();

            $('.check-before-resend').on('shown.bs.collapse', function () {
                $('input[type=email]', this).focus();
            });

            $('.btn.resend').on('click', function () {
                $(this).toggleClass('btn-outline');
            });
        });

        var dynamicForm = {
            'validEmail': {
                'longPollingUrl': '{{ path('wait_valid_email') }}',
                'wait': function () {
                    $.get(dynamicForm.validEmail.longPollingUrl, function (data) {
                        if (data === true) {
                            $('.email-validate-waiting').slideUp();
                            $('.email-validate-success').slideDown().promise().done(function () {
                                alert("{{ 'tasks.confirm_email.success.alert' | trans }}");
                                window.location = '{{ targetUrl }}';
                            });
                        }
                    }).fail(function () {
                        dynamicForm.validEmail.wait();
                    });
                }
            }
        };
    </script>
{% endblock %}

{% block stylesheets_custom %}
    {% stylesheets '@lc_task_email_validation_css' filter='cssrewrite' filter='?uglifycss' %}
    <link rel="stylesheet" href="{{ asset_url }}"/>
    {% endstylesheets %}
{% endblock %}
