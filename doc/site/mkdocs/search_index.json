{
    "docs": [
        {
            "location": "/", 
            "text": "", 
            "title": "Sobre a plataforma"
        }, 
        {
            "location": "/como-instalar/", 
            "text": "Instala\u00e7\u00e3o \nLogin Cidad\u00e3o\n\n\nEsta documenta\u00e7\u00e3o foi baseada em um servidor GNU/Linux Debian 8.1. Se sua inten\u00e7\u00e3o \u00e9 instalar em sistema de base diferente algumas adapta\u00e7\u00f5es podem ser necess\u00e1rias. \n\n\nServer User\n\n\nPara instalar a aplica\u00e7\u00e3o \u00e9 necess\u00e1rio ter acesso a dois usu\u00e1rios: um usu\u00e1rio padr\u00e3o e um usu\u00e1rio com poderes de sudo. Voc\u00ea pode usar o usu\u00e1rio padr\u00e3o de costume de seu servidor e o root, mas recomendamos criar um usu\u00e1rio s\u00f3 para o gerenciamente do Login Cidad\u00e3o, facilitando assim o controle e o registro de logs do sistema. \n:::bash\n    // logado como root, crie o novo user:\n    # useradd --create-home --groups sudo -s /bin/bash login-cidadao\n    // Insira uma senha para o novo user\n    # passwd login-cidadao\n::: \n\n\nInstalando Depend\u00eancias\n\n\nPara que o Login Cidad\u00e3o funcione corretamente ser\u00e1 necess\u00e1rio que estejam instaladas as seguintes depend\u00eancias: \n\n Apache ou Nginx\n\n PHP \n=5.4\n\n memcached\n\n postgres ou mysql\n\n composer\n\n node.js\n* PHP Extensions\n  * php5-curl\n  * php5-intl\n  * php5-mysql ou php5-pgsql ou integra\u00e7\u00e3o de base de dados de sua prefer\u00eancia\n  * php5-memcache (Tamb\u00e9m \u00e9 poss\u00edvel usar php5-memcached mas ser\u00e1 necess\u00e1rio mudar algumas classes de Memcache para Memcached)\n\n\n:::bash\n    // Atualize a lista de pacotes do seu servidor\n    $ sudo apt-get update\n\n\n// Instale o servidor Nginx \n$ sudo apt-get install nginx\n//obs: se o apache estiver instalado ele pode dar conflito com o Nginx. \n// Fique atento para a necessidade de desinstal\u00e1-lo.\n\n//Caso tenha algum gerenciador de bases de dados(mysql ou postgres) voc\u00ea poder\u00e1 us\u00e1-lo. \n//Se n\u00e3o tiver, instale o banco que quer usar. Optamos aqui por postgres\n$ sudo apt-get install postgresql\n\n// Instale o git para auxili\u00e1-lo no processo de obten\u00e7\u00e3o do c\u00f3digo da aplica\u00e7\u00e3o\n$ sudo apt-get install git\n\n// Instalando pacote do server memcached \n$ sudo apt-get install memcached\n\n// Instalando pacotes do php. \n// Observe que aqui vamos optar por usar o postgres, mas \u00e9 poss\u00edvel usar mysql sem problemas\n$ sudo apt-get install php5 php5-cli php5-curl php5-intl php5-pgsql php5-memcache\n\n// Instalando nodejs\n$ sudo curl -sL https://deb.nodesource.com/setup_5.x | bash -\n$ sudo apt-get install --yes nodejs\n\n\n\n\n\n:::\n\n\nInstalando Composer\n\n\nO Login Cidad\u00e3o usa o Composer, um gerenciador de depend\u00eancias PHP. Ele permite que voc\u00ea declare bibliotecas como depend\u00eancias no projeto que ir\u00e1 gerenciar. Para saber mais, acesse: https://getcomposer.org/doc/00-intro.md\n\n\nPara instalar:\n\n\n// Instalando Composer\n\n$ \nsudo curl -sS https://getcomposer.org/installer \n|\n php\n\n$ \nsudo mv composer.phar /usr/local/bin/composer\n\n\n\n\n\nObtendo o Login Cidad\u00e3o\n\n\nAp\u00f3s instalar as depend\u00eancias, clone o reposit\u00f3rio da aplica\u00e7\u00e3o e mude as permiss\u00f5es dos arquivos para operar com apache ou nginx. Recomendamos fazer isso com o usu\u00e1rio criado e dentro de uma estrutura de diret\u00f3rios padr\u00e3o /var/www/login-cidadao, mas \u00e9 poss\u00edvel adaptar para qualquer contexto. \n\n\n:::sh\n    //Logado como login-cidadao user, v\u00e1 para o diret\u00f3rio /var/www\n    $ cd /var/www\n    // Dentro do diret\u00f3rio, clone o reposit\u00f3rio da aplica\u00e7\u00e3o\n    $ sudo git clone https://github.com/redelivre/login-cidadao.git\n:::\n\n\nParametrizando a aplica\u00e7\u00e3o - pr\u00e9-instala\u00e7\u00e3o\n\n\nAgora vamos instalar as depend\u00eancias. Ap\u00f3s esse processo voc\u00ea dever\u00e1 preencher os parametros relativos a sua instala\u00e7\u00e3o. Portanto \u00e9 necess\u00e1rio que voc\u00ea tenha as seguintes informa\u00e7\u00f5es em m\u00e3os: \n\n\nInforma\u00e7\u00f5es de acesso ao banco de dados\n\n\n\n\nEndere\u00e7o do host da base de dados\n\n\nPorta de acesso\n\n\nUsu\u00e1rio\n\n\nSenha\n\n\nSchema (Nome do banco)\n\n\n\n\nLoadbalance\n\n\n\n\nIPs dos servidores de load balance (Para mais informa\u00e7\u00f5es consulta a \ndocumenta\u00e7\u00e3o do Symfony\n sobre o assunto).\n\n\n\n\nAcesso de desenvolvimento e monitoramento\n\n\n\n\nIPs com acesso ao ambiente de desenvolvimento\n\n\nIPs com acesso as p\u00e1ginas de monitoria (endpoints)\n\n\n\n\nMemcache e sess\u00f5es\n\n\n\n\nEndere\u00e7os (IP e porta) usados no memcache\n\n\nPrefixo da sess\u00e3o\n\n\nTempo de vida da sess\u00e3o\n\n\n\n\nEnvio de email\n\n\n\n\nEssas informa\u00e7\u00f5es variam de acordo com o tipo de servi\u00e7o escolhido. \nVer \nDocumenta\u00e7\u00e3o Symfony\n\n\n\n\nSecret\n\n\nGere uma string secreta para composi\u00e7\u00e3o de cifragem\n\n\nEx.:\n\n\n    secret:            CrieSuaStringAleatoria\n\n\n\n\n\nChaves de APIs de terceiros\n\n\n\n\nFacebook\n\n\nGoogle\n\n\nTwitter\n\n\nRecaptcha\n\n\n\n\nDominio e contatos\n\n\n\n\ndom\u00ednio da instala\u00e7\u00e3o\n\n\nEndere\u00e7o do remetente de emails da aplica\u00e7\u00e3o (Ex.: noreply@seu-dominio.com)\n\n\n\n\nAcertando permiss\u00f5es de acesso\n\n\n\u00c9 necess\u00e1rio que as permiss\u00f5es do diret\u00f3rio estejam de acordo com as permiss\u00f5es do Nginx para que os arquivos sejam acessados publicamente. \n\n\n    // Entre no diret\u00f3rio criado \n    $ cd login-cidadao\n    // Mude a permiss\u00e3o dos arquivos. Pode ser necess\u00e1rio fazer isso no final do processo novamente.\n    $ sudo chown -R login-cidadao:www-data *\n    $ sudo chown -R login-cidadao:www-data .*\n\n\n\n\n\nDepois de efetuar as mudan\u00e7as no permissionamento dos arquivos, aplique o comando de listagem de arquivos no diret\u00f3rio para verificar se foi aplicado com sucesso. Seu diret\u00f3rio deve estar assim:\n\n\n    // aplicando o comando de listagem de arquivos e permiss\u00f5es, voc\u00ea dever\u00e1 ver algo como isso:\n\n    login-cidadao@localhost:/var/www/login-cidadao$ ls -la\n    drwxr-xr-x  9 login-cidadao www-data   4096 Dec 15 20:32 .\n    drwxr-xr-x  3 login-cidadao www-data   4096 Dec 15 20:26 ..\n    drwxr-xr-x  7 login-cidadao www-data   4096 Dec 15 20:46 app\n    drwxr-xr-x  2 login-cidadao www-data   4096 Dec 15 20:26 batch\n    drwxr-xr-x  2 login-cidadao www-data   4096 Dec 15 20:33 bin\n    -rw-r--r--  1 login-cidadao www-data     42 Dec 15 20:26 .bowerrc\n    -rw-r--r--  1 login-cidadao www-data   4320 Dec 15 20:26 composer.json\n    -rw-r--r--  1 login-cidadao www-data 159040 Dec 15 20:26 composer.lock\n    drwxr-xr-x  8 login-cidadao www-data   4096 Dec 15 20:26 .git\n    -rw-r--r--  1 login-cidadao www-data    315 Dec 15 20:26 .gitignore\n    -rwxr-xr-x  1 login-cidadao www-data   3991 Dec 15 20:26 install.sh\n    -rw-r--r--  1 login-cidadao www-data  34521 Dec 15 20:26 LICENSE\n    -rw-r--r--  1 login-cidadao www-data    332 Dec 15 20:26 lvp_mock.bat\n    -rw-r--r--  1 login-cidadao www-data   3602 Dec 15 20:26 README.md\n    drwxr-xr-x  4 login-cidadao www-data   4096 Dec 15 20:26 src\n    -rw-r--r--  1 login-cidadao www-data    106 Dec 15 20:26 .travis.yml\n    -rw-r--r--  1 login-cidadao www-data   1308 Dec 15 20:26 UPGRADE-2.2.md\n    -rw-r--r--  1 login-cidadao www-data   1962 Dec 15 20:26 UPGRADE-2.3.md\n    -rw-r--r--  1 login-cidadao www-data   8495 Dec 15 20:26 UPGRADE.md\n    -rw-r--r--  1 login-cidadao www-data   2470 Dec 15 20:26 Vagrantfile\n    drwxr-xr-x 38 login-cidadao www-data   4096 Dec 15 20:46 vendor\n    drwxr-xr-x  5 login-cidadao www-data   4096 Dec 15 20:33 web\n\n\n\n\n\nBaixando dependencias via Composer\n\n\n// Certifique-se de estar dentro do diret\u00f3rio raiz do projeto\n  $ cd /var/www/login-cidadao\n  // Quando estiver rodando o composer, o arquivo parameters.yml (arquivo de parametros da inst\u00e2ncia) \n  // ser\u00e1 preenchido automaticamente. Fique atento as informa\u00e7\u00f5es inseridas\n  // Instalando as depend\u00eancias\n  $ composer install\n\n\nParametrizando manualmente\n\n\nCaso a parametriza\u00e7\u00e3o via composer seja interrompida ou tenha dados que precisem ser completados, voc\u00ea pode alterar manualmente no arquivo \nparameters.yml\n a partir do template contido em \napp/config/parameters.yml.dist\n. \n\n\nConfigurando Ngix\n\n\nCertificado SSL\n\n\nVer \"Usando Certificado SSL\"\n\n\nEnvio de email\n\n\nConfigura\u00e7\u00f5es de servi\u00e7os\n\n\n\n\nVer Configura\u00e7\u00f5es\n\n\n\n\n    // Copiando o arquivo de template para o arquivo default\n    $ sudo cp /var/www/login-cidadao/app/config/parameters.yml.dist /var/www/login-cidadao/app/config/parameters.yml\n\n\n\n\n\nFique atento aos seguintes pontos: \n\n\n3.1. Conectando a base de dados: \n\n\nSe voc\u00ea estiver usando \n\n\n3.2. Configura\u00e7\u00f5es memcached\n\n\n3.3. Configura\u00e7\u00f5es de envio de email (smtp)\n\n\n3.4. Configura\u00e7\u00f5es de token\n\n\nlocale\n:\n            \nen\n\n\nsecret\n:\n            \nThisTokenIsNotSoSecretChangeIt\n\n\n\n\nlocale\n:\n            \npt_BR\n\n\nsecret\n:\n            \ncALL\n-\ng83trinzafederuserall\n#\nset900\n@\nset8\n**\n\n\n\n\n\n\n\n\nCheque os requisitos do PHP \n\n\n\n\nVerifique se todas os requisitos est\u00e3o sendo cumpridos antes de iniciar a instala\u00e7\u00e3o\n    \nphp app/check.php\n\n\nConfigurando base de dados\n\n\nCrie um usu\u00e1rio no postgres e depois uma base. Sugerimos usar o mesmo nome. \n\n\n  $ sudo -u postgres createuser -d login-cidadao\n  $ createdb login-cidadao\n\n\n\n\n\n\n\nSe a verifica\u00e7\u00e3o for bem sucedida inicie a instala\u00e7\u00e3o\n    \n./install.sh\n\n\n\n\nArquivo de configura\u00e7\u00e3o \nparameters.yml\n\n\nlocale:\n -\n substitua pelo seu locale (ex. pt_BR)\n\n\nsecret:\n -\n substitua por uma longa cadeia de letras, n\u00fameros e s\u00edmbolos\n\n\nsite_domain:\n -\n substitua pelo seu dom\u00ednio/subdom\u00ednio\n\n\nrecaptcha_public_key:\n e \nrecaptcha_private_key:\n -\n gere essas chaves em https://www.google.com/recaptcha/\n\n\nregistration.cpf.empty_time:\n e \nregistration.email.unconfirmed_time:\n -\n define quanto tempo deve ser dado para que o usu\u00e1rio confirme o CPF e o email, respectivamente\n\n\nbrute_force_threshold:\n -\n quantas tentativas devem ser toleradas antes de considerar um ataque de for\u00e7a bruta\n\n\nConfigurando Nginx\n\n\nCopie o scritp padr\u00e3o para o reposit\u00f3rio de seu nginx\n\n\n    $ sudo cp /var/www/login-cidadao/batch/nginx-login-cidadao.conf /etc/nginx/sites-available/login-cidadao.conf\n\n\n\n\n\nFa\u00e7a as altera\u00e7\u00f5es necess\u00e1rias! \n\n\n//Fa\u00e7a um link simb\u00f3lico para o arquivo\n  $ sudo ln -s /etc/nginx/sites-available/login-cidadao.conf /etc/nginx/sites-enabled/login-cidadao.conf\n\n\n\n\n\n\n\n\n\n    ServerName sub.dominio.com.br\n    ServerAdmin usuario@email\n\n\nDocumentRoot /var/www/login-cidadao/web\n\n\nDirectory\n \n/ \n\n    Options Indexes FollowSymLinks MultiViews\n    AllowOverride All\n    Order allow,deny\n    allow from all\n\n/Directory\n\n\nErrorLog \n${\nAPACHE_LOG_DIR\n}\n/error.log\nCustomLog \n${\nAPACHE_LOG_DIR\n}\n/access.log combined\n\n\n\n\n\n\n\n* Em `DocumentRoot` \u00e9 preciso apontar para o diret\u00f3rio `web`, neste exemplo o caminho completo \u00e9 `/var/www/login-cidadao/web`.\n\n* ServerName deve ser preenchido com o dom\u00ednio (ex. dominio.com.br) ou subdom\u00ednio completo (ex. sub.dominio.com.br)\n\n### [Primeiros passos p\u00f3s-instala\u00e7\u00e3o](id:pos-instalacao)\n\n1. Adicione os seguintes aliases ao seu arquivo `.bashrc`  \n    `alias prod=\nphp app/console --env=prod\n`  \n    `alias dev=\nphp app/console --env=dev\n`\n\n2. Atualize o perfil do terminal  \n    `source ~/.bashrc`\n    * Obs.: Etapa desnecess\u00e1ria para logins futuros j\u00e1 que o .bashrc ser\u00e1 executado no processo de login.\n\n3. Processe e ative todos os assets  \n    `prod assets:install`  \n    `prod assetic:dump`\n\n4. Dar poderes de super administrador para o primeiro usu\u00e1rio  \n    `prod fos:user:promote \nusername\n ROLE_SUPER_ADMIN`\n\n    * Obs. 1: Substitua \nusername\n pelo nome do usu\u00e1rio como mostrado na \u00e1rea superior direita da p\u00e1gina, geralmente o que precede o \n@\n do email usado na hora da cria\u00e7\u00e3o do usu\u00e1rio.\n\n    * Obs. 2: Para confirmar visualmente o novo papel de super administrador fa\u00e7a um logout e depois um login. Junto ao nome dever\u00e1 haver um campo \nimpersonate\n, ver esse campo \u00e9 a confirma\u00e7\u00e3o.\n\n## Navegando em modo de desenvolvimento\n\nAdicione `/app_dev.php` na URL.\n\n## Alguns comandos pr\u00e1ticos\n\nAssume-se que as estapas 1 e 2 dos [Primeiros passos p\u00f3s-instala\u00e7\u00e3o](#pos-instalacao) tenham sido cumpridos para seguir estes comandos.\n\n* Limpar o cache  \n    `prod cache:clear`  \n    `dev cache:clear`  \n    se n\u00e3o funcionar, em \u00faltima inst\u00e2ncia use  \n    `rm -rf app/cache/*`\n* Criar ou atualizar os assets  \n    `prod assets:install`  \n    `prod assetic:dump`\n* Criar ou atualizar os vendors (\u00fatil, por exemplo, quando se muda de branch)  \n    `composer install`\n\n## Adicionando servi\u00e7os\n\nem breve\n\n## Integrando com o Mapas Culturais\n\n\n\n\n\n'auth.provider' =\n 'OpauthLoginCidadao',\n'auth.config' =\n array(\n    'client_id' =\n 'minha_chave_publica',\n    'client_secret' =\n 'minha_chave_privada',\n    'auth_endpoint' =\n 'https://sub.dominio/oauth/v2/auth',\n    'token_endpoint' =\n 'https://sub.dominio/oauth/v2/token',\n    'user_info_endpoint' =\n 'https://sub.dominio/api/v1/person.json'\n),\n```\n\n Obs. 1: As chaves p\u00fablica e privada s\u00e3o geradas na adi\u00e7\u00e3o do servi\u00e7o.\n\n\n Obs. 2: substituir o dom\u00ednio/subdom\u00ednio das tr\u00eas \u00faltimas linhas.", 
            "title": "Instala\u00e7\u00e3o"
        }, 
        {
            "location": "/como-instalar/#instalacao-login-cidadao", 
            "text": "Esta documenta\u00e7\u00e3o foi baseada em um servidor GNU/Linux Debian 8.1. Se sua inten\u00e7\u00e3o \u00e9 instalar em sistema de base diferente algumas adapta\u00e7\u00f5es podem ser necess\u00e1rias.", 
            "title": "Instala\u00e7\u00e3o Login Cidad\u00e3o"
        }, 
        {
            "location": "/como-instalar/#server-user", 
            "text": "Para instalar a aplica\u00e7\u00e3o \u00e9 necess\u00e1rio ter acesso a dois usu\u00e1rios: um usu\u00e1rio padr\u00e3o e um usu\u00e1rio com poderes de sudo. Voc\u00ea pode usar o usu\u00e1rio padr\u00e3o de costume de seu servidor e o root, mas recomendamos criar um usu\u00e1rio s\u00f3 para o gerenciamente do Login Cidad\u00e3o, facilitando assim o controle e o registro de logs do sistema. \n:::bash\n    // logado como root, crie o novo user:\n    # useradd --create-home --groups sudo -s /bin/bash login-cidadao\n    // Insira uma senha para o novo user\n    # passwd login-cidadao\n:::", 
            "title": "Server User"
        }, 
        {
            "location": "/como-instalar/#instalando-dependencias", 
            "text": "Para que o Login Cidad\u00e3o funcione corretamente ser\u00e1 necess\u00e1rio que estejam instaladas as seguintes depend\u00eancias:   Apache ou Nginx  PHP  =5.4  memcached  postgres ou mysql  composer  node.js\n* PHP Extensions\n  * php5-curl\n  * php5-intl\n  * php5-mysql ou php5-pgsql ou integra\u00e7\u00e3o de base de dados de sua prefer\u00eancia\n  * php5-memcache (Tamb\u00e9m \u00e9 poss\u00edvel usar php5-memcached mas ser\u00e1 necess\u00e1rio mudar algumas classes de Memcache para Memcached)  :::bash\n    // Atualize a lista de pacotes do seu servidor\n    $ sudo apt-get update  // Instale o servidor Nginx \n$ sudo apt-get install nginx\n//obs: se o apache estiver instalado ele pode dar conflito com o Nginx. \n// Fique atento para a necessidade de desinstal\u00e1-lo.\n\n//Caso tenha algum gerenciador de bases de dados(mysql ou postgres) voc\u00ea poder\u00e1 us\u00e1-lo. \n//Se n\u00e3o tiver, instale o banco que quer usar. Optamos aqui por postgres\n$ sudo apt-get install postgresql\n\n// Instale o git para auxili\u00e1-lo no processo de obten\u00e7\u00e3o do c\u00f3digo da aplica\u00e7\u00e3o\n$ sudo apt-get install git\n\n// Instalando pacote do server memcached \n$ sudo apt-get install memcached\n\n// Instalando pacotes do php. \n// Observe que aqui vamos optar por usar o postgres, mas \u00e9 poss\u00edvel usar mysql sem problemas\n$ sudo apt-get install php5 php5-cli php5-curl php5-intl php5-pgsql php5-memcache\n\n// Instalando nodejs\n$ sudo curl -sL https://deb.nodesource.com/setup_5.x | bash -\n$ sudo apt-get install --yes nodejs  :::", 
            "title": "Instalando Depend\u00eancias"
        }, 
        {
            "location": "/como-instalar/#instalando-composer", 
            "text": "O Login Cidad\u00e3o usa o Composer, um gerenciador de depend\u00eancias PHP. Ele permite que voc\u00ea declare bibliotecas como depend\u00eancias no projeto que ir\u00e1 gerenciar. Para saber mais, acesse: https://getcomposer.org/doc/00-intro.md  Para instalar:  // Instalando Composer $  sudo curl -sS https://getcomposer.org/installer  |  php $  sudo mv composer.phar /usr/local/bin/composer", 
            "title": "Instalando Composer"
        }, 
        {
            "location": "/como-instalar/#obtendo-o-login-cidadao", 
            "text": "Ap\u00f3s instalar as depend\u00eancias, clone o reposit\u00f3rio da aplica\u00e7\u00e3o e mude as permiss\u00f5es dos arquivos para operar com apache ou nginx. Recomendamos fazer isso com o usu\u00e1rio criado e dentro de uma estrutura de diret\u00f3rios padr\u00e3o /var/www/login-cidadao, mas \u00e9 poss\u00edvel adaptar para qualquer contexto.   :::sh\n    //Logado como login-cidadao user, v\u00e1 para o diret\u00f3rio /var/www\n    $ cd /var/www\n    // Dentro do diret\u00f3rio, clone o reposit\u00f3rio da aplica\u00e7\u00e3o\n    $ sudo git clone https://github.com/redelivre/login-cidadao.git\n:::", 
            "title": "Obtendo o Login Cidad\u00e3o"
        }, 
        {
            "location": "/como-instalar/#parametrizando-a-aplicacao-pre-instalacao", 
            "text": "Agora vamos instalar as depend\u00eancias. Ap\u00f3s esse processo voc\u00ea dever\u00e1 preencher os parametros relativos a sua instala\u00e7\u00e3o. Portanto \u00e9 necess\u00e1rio que voc\u00ea tenha as seguintes informa\u00e7\u00f5es em m\u00e3os:", 
            "title": "Parametrizando a aplica\u00e7\u00e3o - pr\u00e9-instala\u00e7\u00e3o"
        }, 
        {
            "location": "/como-instalar/#informacoes-de-acesso-ao-banco-de-dados", 
            "text": "Endere\u00e7o do host da base de dados  Porta de acesso  Usu\u00e1rio  Senha  Schema (Nome do banco)", 
            "title": "Informa\u00e7\u00f5es de acesso ao banco de dados"
        }, 
        {
            "location": "/como-instalar/#loadbalance", 
            "text": "IPs dos servidores de load balance (Para mais informa\u00e7\u00f5es consulta a  documenta\u00e7\u00e3o do Symfony  sobre o assunto).", 
            "title": "Loadbalance"
        }, 
        {
            "location": "/como-instalar/#acesso-de-desenvolvimento-e-monitoramento", 
            "text": "IPs com acesso ao ambiente de desenvolvimento  IPs com acesso as p\u00e1ginas de monitoria (endpoints)", 
            "title": "Acesso de desenvolvimento e monitoramento"
        }, 
        {
            "location": "/como-instalar/#memcache-e-sessoes", 
            "text": "Endere\u00e7os (IP e porta) usados no memcache  Prefixo da sess\u00e3o  Tempo de vida da sess\u00e3o", 
            "title": "Memcache e sess\u00f5es"
        }, 
        {
            "location": "/como-instalar/#envio-de-email", 
            "text": "Essas informa\u00e7\u00f5es variam de acordo com o tipo de servi\u00e7o escolhido. \nVer  Documenta\u00e7\u00e3o Symfony", 
            "title": "Envio de email"
        }, 
        {
            "location": "/como-instalar/#secret", 
            "text": "Gere uma string secreta para composi\u00e7\u00e3o de cifragem  Ex.:      secret:            CrieSuaStringAleatoria", 
            "title": "Secret"
        }, 
        {
            "location": "/como-instalar/#chaves-de-apis-de-terceiros", 
            "text": "Facebook  Google  Twitter  Recaptcha", 
            "title": "Chaves de APIs de terceiros"
        }, 
        {
            "location": "/como-instalar/#dominio-e-contatos", 
            "text": "dom\u00ednio da instala\u00e7\u00e3o  Endere\u00e7o do remetente de emails da aplica\u00e7\u00e3o (Ex.: noreply@seu-dominio.com)", 
            "title": "Dominio e contatos"
        }, 
        {
            "location": "/como-instalar/#acertando-permissoes-de-acesso", 
            "text": "\u00c9 necess\u00e1rio que as permiss\u00f5es do diret\u00f3rio estejam de acordo com as permiss\u00f5es do Nginx para que os arquivos sejam acessados publicamente.       // Entre no diret\u00f3rio criado \n    $ cd login-cidadao\n    // Mude a permiss\u00e3o dos arquivos. Pode ser necess\u00e1rio fazer isso no final do processo novamente.\n    $ sudo chown -R login-cidadao:www-data *\n    $ sudo chown -R login-cidadao:www-data .*  Depois de efetuar as mudan\u00e7as no permissionamento dos arquivos, aplique o comando de listagem de arquivos no diret\u00f3rio para verificar se foi aplicado com sucesso. Seu diret\u00f3rio deve estar assim:      // aplicando o comando de listagem de arquivos e permiss\u00f5es, voc\u00ea dever\u00e1 ver algo como isso:\n\n    login-cidadao@localhost:/var/www/login-cidadao$ ls -la\n    drwxr-xr-x  9 login-cidadao www-data   4096 Dec 15 20:32 .\n    drwxr-xr-x  3 login-cidadao www-data   4096 Dec 15 20:26 ..\n    drwxr-xr-x  7 login-cidadao www-data   4096 Dec 15 20:46 app\n    drwxr-xr-x  2 login-cidadao www-data   4096 Dec 15 20:26 batch\n    drwxr-xr-x  2 login-cidadao www-data   4096 Dec 15 20:33 bin\n    -rw-r--r--  1 login-cidadao www-data     42 Dec 15 20:26 .bowerrc\n    -rw-r--r--  1 login-cidadao www-data   4320 Dec 15 20:26 composer.json\n    -rw-r--r--  1 login-cidadao www-data 159040 Dec 15 20:26 composer.lock\n    drwxr-xr-x  8 login-cidadao www-data   4096 Dec 15 20:26 .git\n    -rw-r--r--  1 login-cidadao www-data    315 Dec 15 20:26 .gitignore\n    -rwxr-xr-x  1 login-cidadao www-data   3991 Dec 15 20:26 install.sh\n    -rw-r--r--  1 login-cidadao www-data  34521 Dec 15 20:26 LICENSE\n    -rw-r--r--  1 login-cidadao www-data    332 Dec 15 20:26 lvp_mock.bat\n    -rw-r--r--  1 login-cidadao www-data   3602 Dec 15 20:26 README.md\n    drwxr-xr-x  4 login-cidadao www-data   4096 Dec 15 20:26 src\n    -rw-r--r--  1 login-cidadao www-data    106 Dec 15 20:26 .travis.yml\n    -rw-r--r--  1 login-cidadao www-data   1308 Dec 15 20:26 UPGRADE-2.2.md\n    -rw-r--r--  1 login-cidadao www-data   1962 Dec 15 20:26 UPGRADE-2.3.md\n    -rw-r--r--  1 login-cidadao www-data   8495 Dec 15 20:26 UPGRADE.md\n    -rw-r--r--  1 login-cidadao www-data   2470 Dec 15 20:26 Vagrantfile\n    drwxr-xr-x 38 login-cidadao www-data   4096 Dec 15 20:46 vendor\n    drwxr-xr-x  5 login-cidadao www-data   4096 Dec 15 20:33 web", 
            "title": "Acertando permiss\u00f5es de acesso"
        }, 
        {
            "location": "/como-instalar/#baixando-dependencias-via-composer", 
            "text": "// Certifique-se de estar dentro do diret\u00f3rio raiz do projeto\n  $ cd /var/www/login-cidadao\n  // Quando estiver rodando o composer, o arquivo parameters.yml (arquivo de parametros da inst\u00e2ncia) \n  // ser\u00e1 preenchido automaticamente. Fique atento as informa\u00e7\u00f5es inseridas\n  // Instalando as depend\u00eancias\n  $ composer install", 
            "title": "Baixando dependencias via Composer"
        }, 
        {
            "location": "/como-instalar/#parametrizando-manualmente", 
            "text": "Caso a parametriza\u00e7\u00e3o via composer seja interrompida ou tenha dados que precisem ser completados, voc\u00ea pode alterar manualmente no arquivo  parameters.yml  a partir do template contido em  app/config/parameters.yml.dist .", 
            "title": "Parametrizando manualmente"
        }, 
        {
            "location": "/como-instalar/#configurando-ngix", 
            "text": "", 
            "title": "Configurando Ngix"
        }, 
        {
            "location": "/como-instalar/#certificado-ssl", 
            "text": "Ver \"Usando Certificado SSL\"", 
            "title": "Certificado SSL"
        }, 
        {
            "location": "/como-instalar/#envio-de-email_1", 
            "text": "", 
            "title": "Envio de email"
        }, 
        {
            "location": "/como-instalar/#configuracoes-de-servicos", 
            "text": "Ver Configura\u00e7\u00f5es       // Copiando o arquivo de template para o arquivo default\n    $ sudo cp /var/www/login-cidadao/app/config/parameters.yml.dist /var/www/login-cidadao/app/config/parameters.yml  Fique atento aos seguintes pontos:   3.1. Conectando a base de dados:   Se voc\u00ea estiver usando   3.2. Configura\u00e7\u00f5es memcached  3.3. Configura\u00e7\u00f5es de envio de email (smtp)  3.4. Configura\u00e7\u00f5es de token  locale :              en  secret :              ThisTokenIsNotSoSecretChangeIt  locale :              pt_BR  secret :              cALL - g83trinzafederuserall # set900 @ set8 **    Cheque os requisitos do PHP    Verifique se todas os requisitos est\u00e3o sendo cumpridos antes de iniciar a instala\u00e7\u00e3o\n     php app/check.php", 
            "title": "Configura\u00e7\u00f5es de servi\u00e7os"
        }, 
        {
            "location": "/como-instalar/#configurando-base-de-dados", 
            "text": "Crie um usu\u00e1rio no postgres e depois uma base. Sugerimos usar o mesmo nome.     $ sudo -u postgres createuser -d login-cidadao\n  $ createdb login-cidadao   Se a verifica\u00e7\u00e3o for bem sucedida inicie a instala\u00e7\u00e3o\n     ./install.sh", 
            "title": "Configurando base de dados"
        }, 
        {
            "location": "/como-instalar/#arquivo-de-configuracao-parametersyml", 
            "text": "locale:  -  substitua pelo seu locale (ex. pt_BR)  secret:  -  substitua por uma longa cadeia de letras, n\u00fameros e s\u00edmbolos  site_domain:  -  substitua pelo seu dom\u00ednio/subdom\u00ednio  recaptcha_public_key:  e  recaptcha_private_key:  -  gere essas chaves em https://www.google.com/recaptcha/  registration.cpf.empty_time:  e  registration.email.unconfirmed_time:  -  define quanto tempo deve ser dado para que o usu\u00e1rio confirme o CPF e o email, respectivamente  brute_force_threshold:  -  quantas tentativas devem ser toleradas antes de considerar um ataque de for\u00e7a bruta", 
            "title": "Arquivo de configura\u00e7\u00e3o parameters.yml"
        }, 
        {
            "location": "/como-instalar/#configurando-nginx", 
            "text": "Copie o scritp padr\u00e3o para o reposit\u00f3rio de seu nginx      $ sudo cp /var/www/login-cidadao/batch/nginx-login-cidadao.conf /etc/nginx/sites-available/login-cidadao.conf  Fa\u00e7a as altera\u00e7\u00f5es necess\u00e1rias!   //Fa\u00e7a um link simb\u00f3lico para o arquivo\n  $ sudo ln -s /etc/nginx/sites-available/login-cidadao.conf /etc/nginx/sites-enabled/login-cidadao.conf    \n    ServerName sub.dominio.com.br\n    ServerAdmin usuario@email  DocumentRoot /var/www/login-cidadao/web Directory   /  \n    Options Indexes FollowSymLinks MultiViews\n    AllowOverride All\n    Order allow,deny\n    allow from all /Directory \n\nErrorLog  ${ APACHE_LOG_DIR } /error.log\nCustomLog  ${ APACHE_LOG_DIR } /access.log combined   * Em `DocumentRoot` \u00e9 preciso apontar para o diret\u00f3rio `web`, neste exemplo o caminho completo \u00e9 `/var/www/login-cidadao/web`.\n\n* ServerName deve ser preenchido com o dom\u00ednio (ex. dominio.com.br) ou subdom\u00ednio completo (ex. sub.dominio.com.br)\n\n### [Primeiros passos p\u00f3s-instala\u00e7\u00e3o](id:pos-instalacao)\n\n1. Adicione os seguintes aliases ao seu arquivo `.bashrc`  \n    `alias prod= php app/console --env=prod `  \n    `alias dev= php app/console --env=dev `\n\n2. Atualize o perfil do terminal  \n    `source ~/.bashrc`\n    * Obs.: Etapa desnecess\u00e1ria para logins futuros j\u00e1 que o .bashrc ser\u00e1 executado no processo de login.\n\n3. Processe e ative todos os assets  \n    `prod assets:install`  \n    `prod assetic:dump`\n\n4. Dar poderes de super administrador para o primeiro usu\u00e1rio  \n    `prod fos:user:promote  username  ROLE_SUPER_ADMIN`\n\n    * Obs. 1: Substitua  username  pelo nome do usu\u00e1rio como mostrado na \u00e1rea superior direita da p\u00e1gina, geralmente o que precede o  @  do email usado na hora da cria\u00e7\u00e3o do usu\u00e1rio.\n\n    * Obs. 2: Para confirmar visualmente o novo papel de super administrador fa\u00e7a um logout e depois um login. Junto ao nome dever\u00e1 haver um campo  impersonate , ver esse campo \u00e9 a confirma\u00e7\u00e3o.\n\n## Navegando em modo de desenvolvimento\n\nAdicione `/app_dev.php` na URL.\n\n## Alguns comandos pr\u00e1ticos\n\nAssume-se que as estapas 1 e 2 dos [Primeiros passos p\u00f3s-instala\u00e7\u00e3o](#pos-instalacao) tenham sido cumpridos para seguir estes comandos.\n\n* Limpar o cache  \n    `prod cache:clear`  \n    `dev cache:clear`  \n    se n\u00e3o funcionar, em \u00faltima inst\u00e2ncia use  \n    `rm -rf app/cache/*`\n* Criar ou atualizar os assets  \n    `prod assets:install`  \n    `prod assetic:dump`\n* Criar ou atualizar os vendors (\u00fatil, por exemplo, quando se muda de branch)  \n    `composer install`\n\n## Adicionando servi\u00e7os\n\nem breve\n\n## Integrando com o Mapas Culturais  'auth.provider' =  'OpauthLoginCidadao',\n'auth.config' =  array(\n    'client_id' =  'minha_chave_publica',\n    'client_secret' =  'minha_chave_privada',\n    'auth_endpoint' =  'https://sub.dominio/oauth/v2/auth',\n    'token_endpoint' =  'https://sub.dominio/oauth/v2/token',\n    'user_info_endpoint' =  'https://sub.dominio/api/v1/person.json'\n),\n```  Obs. 1: As chaves p\u00fablica e privada s\u00e3o geradas na adi\u00e7\u00e3o do servi\u00e7o.   Obs. 2: substituir o dom\u00ednio/subdom\u00ednio das tr\u00eas \u00faltimas linhas.", 
            "title": "Configurando Nginx"
        }
    ]
}